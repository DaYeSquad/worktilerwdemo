apply plugin: 'com.android.model.application'

def worktileCorePath = "../../../core"
def worktileJniPath = "../../../jni"
def worktileVendorPath = "../../../vendor"

model {
    repositories {
        libs(PrebuiltLibraries) {
            sqlite {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${worktileVendorPath}/libsqlite/libs/${targetPlatform.getName()}/libsqlite.a")
                }
            }

            curl {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${worktileVendorPath}/curl/prebuilt/android/${targetPlatform.getName()}/libcurl.a")
                }
            }

            ssl {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${worktileVendorPath}/curl/prebuilt/android/${targetPlatform.getName()}/libssl.a")
                }
            }

            crypto {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${worktileVendorPath}/curl/prebuilt/android/${targetPlatform.getName()}/libcrypto.a")
                }
            }

            sakura {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${worktileVendorPath}/sakura/prebuilt/android/${targetPlatform.getName()}/libsakura.a")
                }
            }
        }
    }

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.2"

        defaultConfig {
            applicationId "worktile.com.helloworktile"
            minSdkVersion.apiLevel 14
            targetSdkVersion.apiLevel 23
            versionCode 1
            versionName "1.0"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file("proguard-rules.pro"))
            }
        }

        ndk {
            moduleName "worktilecore"
            stl 'gnustl_static'
            ldLibs.add("log")
            ldLibs.add("z")
            ldLibs.add("m")
            toolchainVersion "4.9"
            platformVersion 14
            abiFilters.addAll(["x86", "armeabi"])

            cppFlags.add("-std=gnu++11")
            cppFlags.add("-fexceptions")

            cppFlags.add("-D__GXX_EXPERIMENTAL_CXX0X__")
            cppFlags.add("-D__STDC_CONSTANT_MACROS")
            cppFlags.add("-DWTC_PLATFORM=WTC_PLATFORM_ANDROID")

            cppFlags.add("-I${file("${worktileCorePath}")}".toString())
            cppFlags.add("-I${file("${worktileJniPath}")}".toString())
            cppFlags.add("-I${file("${worktileVendorPath}")}".toString())
            cppFlags.add("-I${file("${worktileVendorPath}/curl")}".toString())
            cppFlags.add("-I${file("${worktileVendorPath}/libsqlite/include")}".toString())
            cppFlags.add("-I${file("${worktileVendorPath}/sakura/include/android")}".toString())
        }

        sources.main {
            java {
                source {
                    srcDirs "src/main/java",
                            "../../../android/java"
                }
            }

            jni {
                source {
                    srcDirs "${worktileCorePath}",
                            "${worktileJniPath}",
                            "${worktileVendorPath}"
                }

                dependencies {
                    library "sqlite" linkage "static"
                    library "curl" linkage "static"
                    library "ssl" linkage "static"
                    library "crypto" linkage "static"
                    library "sakura" linkage "static"
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
}
